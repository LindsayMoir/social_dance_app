diff --git a/src/db.py b/src/db.py
--- a/src/db.py
+++ b/src/db.py
@@ def __init__(self, config):
-        # Get google api key
-        self.google_api_key = os.getenv("GOOGLE_KEY_PW")
+        self.foursquare_api_key = os.getenv("FOURSQUARE_API_KEY")
@@ def clean_up_address(self, events_df):
-            # 2) If none found, try Google. ***TEMP
-            # if not postal_code:
-            #     google_pc = self.get_postal_code(location, self.google_api_key)
-            #     if google_pc and self.is_canadian_postal_code(google_pc):
-            #         postal_code = google_pc
-            #         logging.info("Got Canadian postal code '%s' from Google for '%s'", postal_code, location)
+            if not postal_code:
+                fs_postal = self.get_postal_code_foursquare(location)
+                if fs_postal and self.is_canadian_postal_code(fs_postal):
+                    postal_code = fs_postal
+                    logging.info("Got Canadian postal code '%s' from Foursquare for '%s'", postal_code, location)
@@ def populate_from_db_or_fallback(self, location_str, postal_code):
-        # if df.empty: ***TEMP
-        #     municipality = self.get_municipality(location_str, self.google_api_key)
-        #     updated_location = f"{location_str}, {municipality}, BC, {postal_code}, CA"
-        #     ...
+        if df.empty:
+            city = self.get_municipality_foursquare(location_str)
+            if not city:
+                return None, None
+            updated_location = f"{location_str}, {city}, BC, {postal_code}, CA"
+            updated_location = updated_location.replace('None,', '').strip()
+            logging.info(f"updated_location is: {updated_location}")
+
+            address_dict = self.create_address_dict(
+                updated_location, None, None, None, None, city, 'BC', postal_code, 'CA'
+            )
+            address_id = self.get_address_id(address_dict)
+            logging.info("No DB match for postal code '%s'. Using Foursquare fallback: '%s'", postal_code, updated_location)
+            return updated_location, address_id
@@ def get_postal_code(self, address, api_key):
-        pass
+    def get_postal_code_foursquare(self, address):
+        endpoint = "https://api.foursquare.com/v3/places/search"
+        headers = {
+            "Accept": "application/json",
+            "Authorization": self.foursquare_api_key
+        }
+        params = {
+            "query": address,
+            "limit": 1,
+            "fields": "location"
+        }
+        try:
+            response = requests.get(endpoint, headers=headers, params=params)
+            response.raise_for_status()
+            data = response.json()
+            if data.get("results"):
+                return data["results"][0].get("location", {}).get("postal_code")
+        except Exception as e:
+            logging.warning(f"Foursquare postal lookup failed for '{address}': {e}")
+        return None
@@ def get_municipality(self, address, api_key):
-        pass
+    def get_municipality_foursquare(self, address):
+        endpoint = "https://api.foursquare.com/v3/places/search"
+        headers = {
+            "Accept": "application/json",
+            "Authorization": self.foursquare_api_key
+        }
+        params = {
+            "query": address,
+            "limit": 1,
+            "fields": "location"
+        }
+        try:
+            response = requests.get(endpoint, headers=headers, params=params)
+            response.raise_for_status()
+            data = response.json()
+            if data.get("results"):
+                return data["results"][0].get("location", {}).get("locality")
+        except Exception as e:
+            logging.warning(f"Foursquare city lookup failed for '{address}': {e}")
+        return None
