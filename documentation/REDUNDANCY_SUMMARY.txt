================================================================================
SOCIAL DANCE APP - CODE REDUNDANCY ANALYSIS SUMMARY
================================================================================

ANALYSIS SCOPE: 117 Python files across /src directory
REDUNDANCIES IDENTIFIED: 25 major patterns across 3 severity levels

================================================================================
CRITICAL REDUNDANCIES (Immediate Action Required)
================================================================================

1. DUAL VERSION PATTERN (CRITICAL) - 2,500+ lines
   Files: fb.py (988L) + fb_v2.py (993L)
          ebs.py (541L) + ebs_v2.py (437L)
          rd_ext.py + rd_ext_v2.py
          read_pdfs.py + read_pdfs_v2.py
   
   Issue: 4 pairs of old/new versions maintained in parallel
   Impact: Code duplication, maintenance burden, inconsistent updates
   Action: Audit usage, migrate to v2, delete v1
   Timeline: 2-3 weeks
   Savings: 2,500+ lines

================================================================================
HIGH-SEVERITY REDUNDANCIES
================================================================================

2. CONFIGURATION MANAGEMENT (HIGH) - 850+ lines
   Files: config_manager.py (177L)
          deployment_config.py (398L)
          db_config.py (246L)
          environment.py (27L)
   
   Duplication:
   - Environment detection: 5+ implementations
   - YAML loading: 41 occurrences
   - Nested config access: 2 implementations (dot notation)
   
   Action: Consolidate into ConfigManager, add db_config() method
   Timeline: 1-2 weeks
   Savings: 350+ lines

3. URL NORMALIZATION (HIGH) - 100+ lines
   Files: fb.py (lines 243-280)
          fb_v2.py (lines 264-301)
          url_nav.py (lines 116-156)
   
   Issue: 3 implementations of similar URL normalization
   Impact: Inconsistent behavior, potential duplicate detection failures
   Action: Consolidate in URLNavigator with platform parameter
   Timeline: 3-5 days
   Savings: 35+ lines

4. LOGGING SETUP (HIGH) - 200+ lines spread across 13+ files
   Files: logging_config.py (79L)
          production_logging.py (150L)
          logging_utils.py (73L)
          + 10 scrapers with inline setup
   
   Issues:
   - Competing logging systems (simple vs production)
   - Duplicate logger creation patterns
   - Scattered initialization across files
   
   Action: Extend logging_config.py to support production mode
   Timeline: 1 week
   Savings: 150+ lines

================================================================================
MEDIUM-SEVERITY REDUNDANCIES
================================================================================

5. SCRAPER INITIALIZATION PATTERN (MEDIUM) - 150+ lines
   Files: fb.py (100-150L)
          ebs.py (70-95L)
          images.py (62-87L)
          gen_scraper.py (88-150L)
   
   Pattern: Identical init sequences repeated
   Action: Create BaseScraper.create_standard_handlers() factory
   Timeline: 3-5 days
   Savings: 200+ lines

6. DATABASE ERROR HANDLING (MEDIUM) - 100+ lines
   Files: db.py (47 instances)
          db_utils.py (10+ instances)
          dedup_llm.py (errors)
          llm.py (10+ instances)
   
   Pattern: Repetitive try/except/log blocks
   Action: Add error handler utilities to resilience.py
   Timeline: 1 week
   Savings: 100+ lines

7. CONFIG ACCESS PATTERNS (MEDIUM) - 80+ lines
   Files: fb.py, ebs.py, gen_scraper.py
   
   Issue: Inconsistent access (dict.get vs [] vs method calls)
   Action: Standardize on ConfigManager.get() pattern
   Timeline: 2-3 days

8. KEYWORD CHECKING (LOW) - 30+ lines
   Status: ALREADY CONSOLIDATED ✓
   Location: scraper_utils.check_keywords() (lines 26-67)

================================================================================
CONSOLIDATION OPPORTUNITIES - QUICK WINS
================================================================================

Quick Win #1: Config Consolidation (Lowest Risk)
  Time: 1-2 days
  Impact: 50+ lines removed
  Steps:
    1. Merge db_config.py functions into ConfigManager
    2. Update 20+ import statements
    3. Run tests

Quick Win #2: Remove Old Scraper Versions (High Impact)
  Time: 1 day (if no active usage)
  Impact: 1,000+ lines removed
  Steps:
    1. Grep for fb.py, ebs.py references (verify using v2)
    2. Delete old files
    3. Update imports

Quick Win #3: Consolidate Logging (Medium Risk)
  Time: 3-5 days
  Impact: 150+ lines removed
  Steps:
    1. Extend logging_config.setup_logging()
    2. Add production mode support
    3. Update 10+ files to use new setup

================================================================================
CONSOLIDATION ROADMAP
================================================================================

Phase 1: Configuration (Week 1)
  └─ Merge db_config into ConfigManager
  └─ Add database_config() method
  └─ Update imports (20+ files)

Phase 2: Version Consolidation (Week 2-3)
  └─ Audit v1/v2 usage in pipeline
  └─ Migrate callers to v2
  └─ Delete old v1 files

Phase 3: Logging (Week 4)
  └─ Extend logging_config.py
  └─ Integrate production_logging.py
  └─ Remove duplicate setups

Phase 4: Error Handling & URL (Week 5)
  └─ Consolidate URL normalization
  └─ Add error handler utilities
  └─ Update scraper patterns

================================================================================
ALREADY WELL-CONSOLIDATED ✓
================================================================================

The following patterns have already been successfully consolidated:
  ✓ Keyword checking (scraper_utils.check_keywords)
  ✓ Text extraction (text_utils.TextExtractor)
  ✓ Browser management (browser_utils.PlaywrightManager)
  ✓ Retry logic (resilience.RetryManager, CircuitBreaker)
  ✓ Database writes (db_utils.DBWriter)
  ✓ URL navigation (url_nav.URLNavigator)

================================================================================
SUMMARY TABLE
================================================================================

Rank | Issue                  | Severity | Files | Lines | Timeline
-----|------------------------|----------|-------|-------|----------
  1  | Dual v1/v2 versions    | CRITICAL |  4 pr | 2500+ | 2-3 weeks
  2  | Config management      | HIGH     |   4   |  850+ | 1-2 weeks
  3  | URL normalization      | HIGH     |   3   |  100+ | 3-5 days
  4  | Logging setup          | HIGH     | 3+10  |  200+ | 1 week
  5  | Scraper init           | MEDIUM   |   4   |  150+ | 3-5 days
  6  | Error handling         | MEDIUM   |   5   |  100+ | 1 week
  7  | Config access          | MEDIUM   |   3   |   80+ | 2-3 days
  8  | Keyword checking       | LOW      |   3   |   30+ | DONE ✓

TOTAL SAVINGS POTENTIAL: 4,010+ lines of code | 4-5 weeks effort

================================================================================
KEY RECOMMENDATIONS
================================================================================

1. START WITH CONFIG CONSOLIDATION (Lowest Risk, High Impact)
   - Merge db_config.py into ConfigManager
   - Saves 350+ lines, improves consistency
   - Low risk - mostly mechanical refactoring

2. DEPRECATE OLD SCRAPER VERSIONS (Highest Impact)
   - Stop using fb.py, ebs.py, etc. 
   - Migrate to fb_v2.py, ebs_v2.py
   - Delete v1 files after migration complete
   - Saves 2,500+ lines

3. UNIFY LOGGING INFRASTRUCTURE (Medium Risk, Important)
   - Stop using production_logging.py directly
   - Integrate into logging_config.py
   - Provides consistent experience across environments

================================================================================
GENERATED: 2025-10-26
ANALYZED: 117 Python files
REPORT: /mnt/d/GitHub/social_dance_app/documentation/CODE_REDUNDANCY_ANALYSIS.md
================================================================================
